#!/usr/bin/env python

import os
import re
import sys
import subprocess
import logging
import optparse

from socket import gethostname
from proxmox_utils import KVMUtils, ShellUtils
                    
def main():
  # ---------------------------------------------------------------
  # Option handling
  # ---------------------------------------------------------------
  usage = "usage: %prog [options] <id-from> <id-to>"
  parser = optparse.OptionParser(usage)
  
  options, args = parser.parse_args()

  if not len(args) == 2:
    parser.error("Wrong number of arguments.")
  
  # ---------------------------------------------------------------
  # Grab options
  # ---------------------------------------------------------------
  id_from = args[0]
  id_to = args[1]
  
  if not id_to.isdigit():
    raise Exception("The targed id must be numeric.")

  # ---------------------------------------------------------------
  # Determine paths
  # ---------------------------------------------------------------
  path_from = KVMUtils.image_path(id_from)
  path_to = KVMUtils.image_path(id_to)
  hostname = gethostname()

  # ---------------------------------------------------------------
  # Check paths
  # ---------------------------------------------------------------
  if not KVMUtils.exists(id_from):
    raise Exception('The virtual machine "%s" does not exist.' % id_from)

  if KVMUtils.exists(id_to):
    raise Exception('The virtual machine "%s" already exists.' % id_to)

  # ---------------------------------------------------------------
  # Get source machine status
  # ---------------------------------------------------------------
  source_status = KVMUtils.status(id_from)
  if source_status == 'unknown':
    ShellUtils.confirm_continue("Source machine is in unknown state. Do you want to continue?", False)
  elif source_status == 'stopped':
    logging.info("Souce machine is stopped, continuing.")
  elif source_status == 'running':
    ShellUtils.confirm_continue("Source machine is currently running and has to be suspended before cloning. Do you want to continue?", False)
    KVMUtils.suspend(id_from)
    logging.info("Source machine suspended")
  
  # ---------------------------------------------------------------
  # Copy machine files
  # ---------------------------------------------------------------
  logging.info("Cloning machine files...")
  ShellUtils.command(["cp", "-r", path_from, path_to])
  logging.info("Cloning done")
  
  # ---------------------------------------------------------------
  # Copy configuration file
  # ---------------------------------------------------------------
  logging.info("Copying configuration file...")
  ShellUtils.command(["cp", "/etc/pve/nodes/" + hostname + "/qemu-server/" + id_from + ".conf",  "/etc/pve/nodes/" + hostname + "/qemu-server/" + id_to + ".conf"])
  logging.info("Copying done")

  # ---------------------------------------------------------------
  # Resume machine if suspended
  # ---------------------------------------------------------------
  if source_status == 'running':
    logging.info("Resume suspended source machine...")
    KVMUtils.suspend(id_from)
    logging.info("Resumed")
  
  # ---------------------------------------------------------------
  # Ask for editing of new file
  # ---------------------------------------------------------------
  if ShellUtils.confirm("Cloning successfully. Do you want to edit the new configuration file?", True):
    os.system("vim " + KVMUtils.config_path(id_to))
  
if __name__ == '__main__':
  ShellUtils.configure_logging()
  main()
  exit(0)
